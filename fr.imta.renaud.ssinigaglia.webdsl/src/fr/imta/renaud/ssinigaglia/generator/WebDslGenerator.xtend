/*
 * generated by Xtext 2.12.0
 */
package fr.imta.renaud.ssinigaglia.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.imta.renaud.ssinigaglia.webDsl.Program
import fr.imta.renaud.ssinigaglia.webDsl.Action
import fr.imta.renaud.ssinigaglia.webDsl.GoAction
import org.eclipse.emf.common.util.EList
import fr.imta.renaud.ssinigaglia.webDsl.Selection
import fr.imta.renaud.ssinigaglia.webDsl.CallProcedure
import fr.imta.renaud.ssinigaglia.webDsl.LinkButtonSelection
import fr.imta.renaud.ssinigaglia.webDsl.PageSelection
import fr.imta.renaud.ssinigaglia.webDsl.ComboboxSelection
import fr.imta.renaud.ssinigaglia.webDsl.CheckboxSelection
import fr.imta.renaud.ssinigaglia.webDsl.GeneralSelection
import fr.imta.renaud.ssinigaglia.webDsl.SetAction
import fr.imta.renaud.ssinigaglia.webDsl.StoreAction
import fr.imta.renaud.ssinigaglia.webDsl.Core
import fr.imta.renaud.ssinigaglia.webDsl.Attribute
import java.util.HashMap
import fr.imta.renaud.ssinigaglia.webDsl.AssertContains
import fr.imta.renaud.ssinigaglia.webDsl.AssertEquals
import fr.imta.renaud.ssinigaglia.webDsl.GeneralAction

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WebDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		fsa.generateFile('SeleniumTest.java', 
			resource.contents.filter(Program).head.generateProgram
		)
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))


	}
	
	def generateProgram(Program m) '''
		import org.junit.*;
		import org.junit.runner.RunWith;
		import org.junit.runners.BlockJUnit4ClassRunner;
		import org.openqa.selenium.By;
		import org.openqa.selenium.JavascriptExecutor;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.chrome.ChromeDriverService;
		import org.openqa.selenium.remote.DesiredCapabilities;
		import org.openqa.selenium.remote.RemoteWebDriver;
		import org.openqa.selenium.support.ui.Select;
		
		import java.io.File;
		import java.io.IOException;
		import java.util.ArrayList;
		import java.util.List;
		
		@RunWith(BlockJUnit4ClassRunner.class)
		public class SeleniumTest {
			
			private static ChromeDriverService service;
			private WebDriver driver;
			
			@BeforeClass
			public static void createAndStartService() throws IOException {
				String exePath = "C:\\Users\\Steeve\\Work\\EMN\\FIL_2018\\DSL\\chromedriver.exe";
			
			    service = new ChromeDriverService.Builder()
			                .usingDriverExecutable(new File(exePath))
			                .usingAnyFreePort()
			                .build();
			    service.start();
			}
			
			    @AfterClass
			    public static void createAndStopService() {
			        service.stop();
			    }
			
			    @Before
			    public void createDriver() {
			        driver = new RemoteWebDriver(service.getUrl(),
			                DesiredCapabilities.«m.cores.get(0).browser»()); // TODO Attention, faudrait voir comment gérer cet appel si on veut générer plusieurs tests
			    }
			
			    @After
			    public void quitDriver() {
			        driver.quit();
			    }
			    
		    /**
		     * Uncheck all checkboxes in the page.
		     */
		    private void uncheckAllCheckboxes() {
		        for (WebElement webElement : findCheckboxes()) {
		            this.scrollTo(webElement);
		            if (webElement.isDisplayed() && webElement.isSelected())
		                webElement.click();
		        }
		    }
		
		
		    /**
		     * Find the first combobox in the page.
		     *
		     * @return Select object (combobox).
		     */
		    private Select findCombobox() {
		        List<WebElement> comboboxes = driver.findElements(By.tagName("select"));
		        for (WebElement combobox : comboboxes) {
		            if (combobox.isDisplayed() && combobox.isEnabled()) {
		                return new Select(combobox);
		            }
		        }
		        throw new RuntimeException("No combobox found");
		    }
		
		//    private int countBy(By by) {
		//        return driver.findElements(by).size();
		//    }
		
		    private WebElement findElementByTagAndAttribute(String tag, String attribute, String value) {
		        for (WebElement element : findAllElements(By.tagName(tag))) {
		            if (element.getAttribute(attribute).equals(value)) {
		                return element;
		            }
		        }
		        return null;
		    }
		
		    private List<WebElement> findElementsByTagAndAttribute(String tag, String attribute, String value) {
		        if (attribute == null || attribute.equals("")) {
		            throw new RuntimeException("attribute can't be null");
		        }
		        List<WebElement> elements = new ArrayList<>();
		        for (WebElement element : findAllElements(By.tagName(tag))) {
		            if (element.getAttribute(attribute).equals(value)) {
		                elements.add(element);
		            }
		        }
		        return elements;
		    }
		
		    private WebElement findElementByTagAndText(String tag, String value) {
		        final String xpath = "//" + tag + "[text()='" + value + "']";
		        for (WebElement element : driver.findElements(By.xpath(xpath))) {
		            if (element.isEnabled() && element.isDisplayed()) {
		                return element;
		            }
		        }
		        return null;
		    }
		
		    private List<WebElement> findElementsByTagAndText(String tag, String value) {
		        final String xpath = "//" + tag + "[text()='" + value + "']";
		        List<WebElement> elements = new ArrayList<>();
		        for (WebElement element : driver.findElements(By.xpath(xpath))) {
		            if (element.isEnabled() && element.isDisplayed()) {
		                elements.add(element);
		            }
		        }
		        return elements;
		    }
		
		    private void clickElem(WebElement element) {
		        scrollTo(element).click();
		    }
		
		    private WebElement findSearchField() {
		        return findVisibleOne(By.name("search_api_fulltext"));
		    }
		
		    private WebElement findParent(WebElement element) {
		        return element.findElement(By.xpath(".."));
		    }
		
		    private WebElement findButton(String label) {
		        return driver.findElement(By.xpath("//input[@type='submit'][@value='" + label + "']"));
		    }
		
		    private WebElement findElementContainsText(String text) {
		        return driver.findElement(By.xpath("//*[contains(text(),'" + text + "')]"));
		    }
		
		    private List<WebElement> findCheckboxes() {
		        List<WebElement> elements = driver.findElements(By.xpath("//input[@type='checkbox']"));
		        return elements;
		    }
		
		    private WebElement findCheckbox(String lbl) {
		        WebElement label = driver.findElement(By.xpath("//label[text()='" + lbl + "']"));
		        return label.findElement(By.xpath("preceding-sibling::*[1]"));
		    }
		    
		    private WebElement checkCheckbox(WebElement element) {
		            if (element.isSelected()) return element;
		            clickElem(element);
		            return element;
		    }
		    
		    private WebElement uncheckCheckbox(WebElement element) {
		            if (element.isSelected()) {
		                clickElem(element);
		            }
		            return element;
		    }
		    
		    private void checkAllCheckboxes() {
		            for (WebElement element : findCheckboxes()) {
		                this.scrollTo(element);
		                if (element.isDisplayed() && !element.isSelected()) {
		                    element.click();
		                }
		            }
		    }
		
		    private WebElement findVisibleOne(By by) {
		        List<WebElement> elements = driver.findElements(by);
		        for (WebElement element : elements) {
		            if (element.isDisplayed()) {
		                return element;
		            }
		        }
		        return null;
		    }
		
		    private List<WebElement> findAllElements(By by) {
		        return driver.findElements(by);
		    }
		
		
		    private void scrollTo(int y) {
		        y = y - 100;
		        StringBuilder stringBuilder = new StringBuilder("window.scrollTo(0,");
		        stringBuilder.append(y)
		                .append(")");
		
		        JavascriptExecutor jse = (JavascriptExecutor) driver;
		        jse.executeScript(stringBuilder.toString());
		    }
		
		    private WebElement scrollTo(WebElement element) {
		        this.scrollTo(element.getLocation().y);
		        return element;
		    }
			
			«FOR proc : m.procedures»
				
			«ENDFOR»
			
			«FOR core : m.cores»
				«core.generateTest(m.cores.indexOf(core))»
			«ENDFOR»
		}
	
	'''	
	
	def generateTest(Core core, int i) '''
		@Test
		public void «core.name»() {
			«FOR action : core.actions»
				«action.createAction(core.actions.indexOf(action))»
			«ENDFOR»
		}
	'''
	
	dispatch def createAction(GoAction action, int i) '''
		driver.get("«action.url»");
	'''

	
	dispatch def createAction(LinkButtonSelection action, int i) '''
		«val selection = action.typeSelection»
		«val htmlElem = getTypeHtmlElement(action.typeElement)»
		«var attType = ""»
		«var attValue = ""»
		«IF selection.attribute !== null»
			//«attType = getTypeAttribute(selection.attribute)»
			//«attValue = if (selection.value !== null) selection.value else selection.^var.name»
		«ELSE»
			// TODO
		«ENDIF»
		
		«IF htmlElem == "button"»
			WebElement «htmlElem»«i» = findButton("«attValue»");
		«ELSE»
			«IF attType === ""»
			WebElement «htmlElem»«i» = findElementByTagAndText("«htmlElem»", "«attValue»");
			«ELSE»
			WebElement «htmlElem»«i» = findElementByTagAndAttribute("«htmlElem»", "«attType»", "«attValue»");
			«ENDIF»
		«ENDIF»
		«FOR click : action.clicks»
			clickElem(«htmlElem»«i»);
		«ENDFOR»
	'''
	
	dispatch def createAction(GeneralSelection action, int i) '''
		«val selection = action.typeSelection»
		«val htmlElem = getTypeHtmlElement(action.typeElement)»
		«val elem = htmlElem+i»
		«var attType = ""»
		«var attValue = ""»
		«IF selection.attribute !== null»
			//«attType = getTypeAttribute(selection.attribute)»
			//«attValue = if (selection.value !== null) selection.value else selection.^var.name»
		«ELSE»
			//Faire quelque chose si c'est PARENT/FIRST/ALL
		«ENDIF»
		
		«IF htmlElem == "search_field"»
			WebElement «elem» = findSearchField();
		«ELSE»
			«IF attType === ""»
			WebElement «elem» = findElementByTagAndText("«htmlElem»", "«attValue»");
			«ELSE»
			WebElement «elem» = findElementByTagAndAttribute("«htmlElem»", "«attType»", "«attValue»");
			«ENDIF»
		«ENDIF»
		
		«FOR generalAction : action.generalActions»
			«if (generalAction instanceof SetAction) createSetAction(generalAction as SetAction, elem)»
			«if (generalAction instanceof StoreAction) createStoreAction(generalAction as StoreAction, elem)»
			«if (generalAction instanceof Selection) createSelectionAction(generalAction as Selection, elem)»
		«ENDFOR»
	'''
	
	dispatch def createAction(CheckboxSelection action, int i) '''
		«val htmlElem = getTypeHtmlElement(action.typeElement)»
		«val elem = htmlElem+i»
		«IF action.typeSelection !== null»
			«val attValue = if (action.typeSelection !== null && action.typeSelection.value !== null) action.typeSelection.value else action.typeSelection.^var.name»
			WebElement «elem» = findCheckbox("«attValue»");
			«action.action»Checkbox(«elem»);
		«ELSE»
			«action.action»AllCheckboxes();
		«ENDIF»
		
	'''
	
	dispatch def createAction(ComboboxSelection action, int i) '''
		«val htmlElem = getTypeHtmlElement(action.typeElement)»
		«val elem = htmlElem+i»
		Select «elem» = findCombobox();
		«FOR value : action.values»
			«elem».selectByVisibleText("«value»");
		«ENDFOR»
	'''
	
	dispatch def createAction(PageSelection action, int i) '''
		«FOR sa : action.storeActions»
«««			«createStoreAction(sa)»
		«ENDFOR»
		«FOR a : action.assertions»
			«a.createAssert()»
		«ENDFOR»
	'''
	
	dispatch def createAssert(AssertContains assert)'''
		«val attValue = assert.value»
		«val htmlElem = getTypeHtmlElement(assert.htmlElement.getName())»
		
«««		«IF assert.attribute !== null»
«««			«val attType = getTypeAttribute(assert.attribute)»
«««			«val xpathval = if(attType !== "text") "@"+attType else attType+"()" »
«««			Assert.assertNotNull(findVisibleOne(By.xpath("//«htmlElem»[«xpathval»='«attValue»']")));
«««		«ELSE»
		«IF assert.text!==null»
			WebElement elementFinal = findElementContainsText("«attValue»");
		«ELSEIF assert.attribute !== null && assert.attribute.getName !== "LABEL"»
			«val attType = getTypeAttribute(assert.attribute)»
			WebElement elementFinal = findElementByTagAndAttribute("«htmlElem»","«attType»", "«attValue»");
		«ELSE»
			WebElement elementFinal = findElementByTagAndText("«htmlElem»","«attValue»");
		«ENDIF»
		Assert.assertNotNull(elementFinal);
		
	'''
	
	dispatch def createAssert(AssertEquals assert)'''
		
	'''
	
	def createSetAction(SetAction action, String elem) '''
		«elem».sendKeys("«action.value»");
	'''
	
	def createStoreAction(StoreAction action, String parent) '''
		«IF action.^val === Attribute.TITLE»
			String «action.^var.name» = «parent».getText();
		«ENDIF»
	'''
	
	def createSelectionAction(Selection action, String elem) '''
		WebElement «elem»Parent = findParent(«elem»);
	'''
	
	dispatch def createAction(CallProcedure action, int i) '''
	'''
	
	def getTypeAttribute(Attribute att) {
		switch att.getName {
			case "ID" : return "id"
			case "LABEL" : return ""
			case "CLASS" : return "class"
			case "ALT" : return "alt"
			case "VALUE" : return "value"
			case "HREF" : return "href"
			case "TITLE" : return "title"
			case "NAME" : return "name"
		}
	}
	
	def getTypeHtmlElement(String elem) {
		switch elem {
			case "DIV" : return "div"
			case "LINK" : return "a"
			case "BUTTON" : return "button"
			case "SEARCH_FIELD" : return "search_field"
			case "CHECKBOX" : return "checkbox"
			case "COMBO_BOX" : return "select"
			case "PAGE" : return "body"
			case "IMAGE" : return "img"
		}
	}
	
	
}
