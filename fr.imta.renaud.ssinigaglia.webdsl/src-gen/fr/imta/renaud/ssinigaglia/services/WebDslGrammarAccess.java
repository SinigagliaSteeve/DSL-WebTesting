/*
 * generated by Xtext 2.12.0
 */
package fr.imta.renaud.ssinigaglia.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WebDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProceduresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProceduresProcedureParserRuleCall_0_0 = (RuleCall)cProceduresAssignment_0.eContents().get(0);
		private final Assignment cCoreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoreCoreParserRuleCall_1_0 = (RuleCall)cCoreAssignment_1.eContents().get(0);
		
		//Program:
		//	procedures+=Procedure*
		//	core=Core;
		@Override public ParserRule getRule() { return rule; }
		
		//procedures+=Procedure* core=Core
		public Group getGroup() { return cGroup; }
		
		//procedures+=Procedure*
		public Assignment getProceduresAssignment_0() { return cProceduresAssignment_0; }
		
		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_0_0() { return cProceduresProcedureParserRuleCall_0_0; }
		
		//core=Core
		public Assignment getCoreAssignment_1() { return cCoreAssignment_1; }
		
		//Core
		public RuleCall getCoreCoreParserRuleCall_1_0() { return cCoreCoreParserRuleCall_1_0; }
	}
	public class CoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Core");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpen_browserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBrowserEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		
		//Core:
		//	'open_browser' name=Browser
		//	actions+=Action*;
		@Override public ParserRule getRule() { return rule; }
		
		//'open_browser' name=Browser actions+=Action*
		public Group getGroup() { return cGroup; }
		
		//'open_browser'
		public Keyword getOpen_browserKeyword_0() { return cOpen_browserKeyword_0; }
		
		//name=Browser
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Browser
		public RuleCall getNameBrowserEnumRuleCall_1_0() { return cNameBrowserEnumRuleCall_1_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCEDUREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarVarParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Procedure:
		//	'PROCEDURE' name=ID '(' var=Var '){'
		//	actions+=Action*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PROCEDURE' name=ID '(' var=Var '){' actions+=Action* '}'
		public Group getGroup() { return cGroup; }
		
		//'PROCEDURE'
		public Keyword getPROCEDUREKeyword_0() { return cPROCEDUREKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var=Var
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_3_0() { return cVarVarParserRuleCall_3_0; }
		
		//'){'
		public Keyword getRightParenthesisLeftCurlyBracketKeyword_4() { return cRightParenthesisLeftCurlyBracketKeyword_4; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGoActionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGoActionGoActionParserRuleCall_0_0 = (RuleCall)cGoActionAssignment_0.eContents().get(0);
		private final Assignment cSelectionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionSelectionParserRuleCall_1_0 = (RuleCall)cSelectionAssignment_1.eContents().get(0);
		private final Assignment cCallProcedureAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCallProcedureCallProcedureParserRuleCall_2_0 = (RuleCall)cCallProcedureAssignment_2.eContents().get(0);
		
		//Action:
		//	goAction=GoAction | selection=Selection | callProcedure=CallProcedure;
		@Override public ParserRule getRule() { return rule; }
		
		//goAction=GoAction | selection=Selection | callProcedure=CallProcedure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//goAction=GoAction
		public Assignment getGoActionAssignment_0() { return cGoActionAssignment_0; }
		
		//GoAction
		public RuleCall getGoActionGoActionParserRuleCall_0_0() { return cGoActionGoActionParserRuleCall_0_0; }
		
		//selection=Selection
		public Assignment getSelectionAssignment_1() { return cSelectionAssignment_1; }
		
		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_1_0() { return cSelectionSelectionParserRuleCall_1_0; }
		
		//callProcedure=CallProcedure
		public Assignment getCallProcedureAssignment_2() { return cCallProcedureAssignment_2; }
		
		//CallProcedure
		public RuleCall getCallProcedureCallProcedureParserRuleCall_2_0() { return cCallProcedureCallProcedureParserRuleCall_2_0; }
	}
	public class CallProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.CallProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefProcedureCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefProcedureIDTerminalRuleCall_1_0_1 = (RuleCall)cRefProcedureCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgSTRINGTerminalRuleCall_3_0 = (RuleCall)cArgAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CallProcedure:
		//	'PROC:' ref=[Procedure] '(' arg=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'PROC:' ref=[Procedure] '(' arg=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'PROC:'
		public Keyword getPROCKeyword_0() { return cPROCKeyword_0; }
		
		//ref=[Procedure]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Procedure]
		public CrossReference getRefProcedureCrossReference_1_0() { return cRefProcedureCrossReference_1_0; }
		
		//ID
		public RuleCall getRefProcedureIDTerminalRuleCall_1_0_1() { return cRefProcedureIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//arg=STRING
		public Assignment getArgAssignment_3() { return cArgAssignment_3; }
		
		//STRING
		public RuleCall getArgSTRINGTerminalRuleCall_3_0() { return cArgSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GoActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.GoAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GoAction:
		//	'go' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'go' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Selection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLinkButtonSelectionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLinkButtonSelectionLinkButtonSelectionParserRuleCall_0_0 = (RuleCall)cLinkButtonSelectionAssignment_0.eContents().get(0);
		private final Assignment cGeneralSelectionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cGeneralSelectionGeneralSelectionParserRuleCall_1_0 = (RuleCall)cGeneralSelectionAssignment_1.eContents().get(0);
		private final Assignment cCheckboxSelectionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCheckboxSelectionCheckboxSelectionParserRuleCall_2_0 = (RuleCall)cCheckboxSelectionAssignment_2.eContents().get(0);
		private final Assignment cComboboxSelectionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cComboboxSelectionComboboxSelectionParserRuleCall_3_0 = (RuleCall)cComboboxSelectionAssignment_3.eContents().get(0);
		private final Assignment cPageSelectionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cPageSelectionPageSelectionParserRuleCall_4_0 = (RuleCall)cPageSelectionAssignment_4.eContents().get(0);
		
		//Selection:
		//	linkButtonSelection=LinkButtonSelection
		//	| generalSelection=GeneralSelection
		//	| checkboxSelection=CheckboxSelection
		//	| comboboxSelection=ComboboxSelection
		//	| pageSelection=PageSelection;
		@Override public ParserRule getRule() { return rule; }
		
		//linkButtonSelection=LinkButtonSelection | generalSelection=GeneralSelection | checkboxSelection=CheckboxSelection |
		//comboboxSelection=ComboboxSelection | pageSelection=PageSelection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//linkButtonSelection=LinkButtonSelection
		public Assignment getLinkButtonSelectionAssignment_0() { return cLinkButtonSelectionAssignment_0; }
		
		//LinkButtonSelection
		public RuleCall getLinkButtonSelectionLinkButtonSelectionParserRuleCall_0_0() { return cLinkButtonSelectionLinkButtonSelectionParserRuleCall_0_0; }
		
		//generalSelection=GeneralSelection
		public Assignment getGeneralSelectionAssignment_1() { return cGeneralSelectionAssignment_1; }
		
		//GeneralSelection
		public RuleCall getGeneralSelectionGeneralSelectionParserRuleCall_1_0() { return cGeneralSelectionGeneralSelectionParserRuleCall_1_0; }
		
		//checkboxSelection=CheckboxSelection
		public Assignment getCheckboxSelectionAssignment_2() { return cCheckboxSelectionAssignment_2; }
		
		//CheckboxSelection
		public RuleCall getCheckboxSelectionCheckboxSelectionParserRuleCall_2_0() { return cCheckboxSelectionCheckboxSelectionParserRuleCall_2_0; }
		
		//comboboxSelection=ComboboxSelection
		public Assignment getComboboxSelectionAssignment_3() { return cComboboxSelectionAssignment_3; }
		
		//ComboboxSelection
		public RuleCall getComboboxSelectionComboboxSelectionParserRuleCall_3_0() { return cComboboxSelectionComboboxSelectionParserRuleCall_3_0; }
		
		//pageSelection=PageSelection
		public Assignment getPageSelectionAssignment_4() { return cPageSelectionAssignment_4; }
		
		//PageSelection
		public RuleCall getPageSelectionPageSelectionParserRuleCall_4_0() { return cPageSelectionPageSelectionParserRuleCall_4_0; }
	}
	public class LinkButtonSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.LinkButtonSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLINKKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBUTTONKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cGeneralActionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cGeneralActionsGeneralActionParserRuleCall_3_0_0 = (RuleCall)cGeneralActionsAssignment_3_0.eContents().get(0);
		private final Keyword cClickKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LinkButtonSelection:
		//	("LINK" | "BUTTON") typeSelection=TypeSelection '{' (generalActions+=GeneralAction | 'click')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//("LINK" | "BUTTON") typeSelection=TypeSelection '{' (generalActions+=GeneralAction | 'click')* '}'
		public Group getGroup() { return cGroup; }
		
		//"LINK" | "BUTTON"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"LINK"
		public Keyword getLINKKeyword_0_0() { return cLINKKeyword_0_0; }
		
		//"BUTTON"
		public Keyword getBUTTONKeyword_0_1() { return cBUTTONKeyword_0_1; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(generalActions+=GeneralAction | 'click')*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//generalActions+=GeneralAction
		public Assignment getGeneralActionsAssignment_3_0() { return cGeneralActionsAssignment_3_0; }
		
		//GeneralAction
		public RuleCall getGeneralActionsGeneralActionParserRuleCall_3_0_0() { return cGeneralActionsGeneralActionParserRuleCall_3_0_0; }
		
		//'click'
		public Keyword getClickKeyword_3_1() { return cClickKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GeneralSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.GeneralSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSEARCH_FIELDKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDIVKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeneralActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeneralActionsGeneralActionParserRuleCall_3_0 = (RuleCall)cGeneralActionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GeneralSelection:
		//	("SEARCH_FIELD" | "DIV" | "A") typeSelection=TypeSelection '{'
		//	generalActions+=GeneralAction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//("SEARCH_FIELD" | "DIV" | "A") typeSelection=TypeSelection '{' generalActions+=GeneralAction* '}'
		public Group getGroup() { return cGroup; }
		
		//"SEARCH_FIELD" | "DIV" | "A"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"SEARCH_FIELD"
		public Keyword getSEARCH_FIELDKeyword_0_0() { return cSEARCH_FIELDKeyword_0_0; }
		
		//"DIV"
		public Keyword getDIVKeyword_0_1() { return cDIVKeyword_0_1; }
		
		//"A"
		public Keyword getAKeyword_0_2() { return cAKeyword_0_2; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//generalActions+=GeneralAction*
		public Assignment getGeneralActionsAssignment_3() { return cGeneralActionsAssignment_3; }
		
		//GeneralAction
		public RuleCall getGeneralActionsGeneralActionParserRuleCall_3_0() { return cGeneralActionsGeneralActionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CheckboxSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.CheckboxSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cGeneralActionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cGeneralActionsGeneralActionParserRuleCall_3_0_0 = (RuleCall)cGeneralActionsAssignment_3_0.eContents().get(0);
		private final Keyword cCheckKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cUncheckKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CheckboxSelection:
		//	"CHECKBOX" typeSelection=TypeSelection '{' (generalActions+=GeneralAction
		//	| 'check'
		//	| 'uncheck')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"CHECKBOX" typeSelection=TypeSelection '{' (generalActions+=GeneralAction | 'check' | 'uncheck')* '}'
		public Group getGroup() { return cGroup; }
		
		//"CHECKBOX"
		public Keyword getCHECKBOXKeyword_0() { return cCHECKBOXKeyword_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(generalActions+=GeneralAction | 'check' | 'uncheck')*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//generalActions+=GeneralAction
		public Assignment getGeneralActionsAssignment_3_0() { return cGeneralActionsAssignment_3_0; }
		
		//GeneralAction
		public RuleCall getGeneralActionsGeneralActionParserRuleCall_3_0_0() { return cGeneralActionsGeneralActionParserRuleCall_3_0_0; }
		
		//'check'
		public Keyword getCheckKeyword_3_1() { return cCheckKeyword_3_1; }
		
		//'uncheck'
		public Keyword getUncheckKeyword_3_2() { return cUncheckKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComboboxSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.ComboboxSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOMBO_BOXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cGeneralActionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cGeneralActionsGeneralActionParserRuleCall_3_0_0 = (RuleCall)cGeneralActionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cSelectKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComboboxSelection:
		//	"COMBO_BOX" typeSelection=TypeSelection '{' (generalActions+=GeneralAction
		//	| 'select' STRING)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"COMBO_BOX" typeSelection=TypeSelection '{' (generalActions+=GeneralAction | 'select' STRING)* '}'
		public Group getGroup() { return cGroup; }
		
		//"COMBO_BOX"
		public Keyword getCOMBO_BOXKeyword_0() { return cCOMBO_BOXKeyword_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(generalActions+=GeneralAction | 'select' STRING)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//generalActions+=GeneralAction
		public Assignment getGeneralActionsAssignment_3_0() { return cGeneralActionsAssignment_3_0; }
		
		//GeneralAction
		public RuleCall getGeneralActionsGeneralActionParserRuleCall_3_0_0() { return cGeneralActionsGeneralActionParserRuleCall_3_0_0; }
		
		//'select' STRING
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'select'
		public Keyword getSelectKeyword_3_1_0() { return cSelectKeyword_3_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_1_1() { return cSTRINGTerminalRuleCall_3_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PageSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.PageSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPAGEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStoreActionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStoreActionStoreActionParserRuleCall_2_0_0 = (RuleCall)cStoreActionAssignment_2_0.eContents().get(0);
		private final Assignment cAssertionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAssertionAssertParserRuleCall_2_1_0 = (RuleCall)cAssertionAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PageSelection:
		//	"PAGE" '{' (storeAction=StoreAction
		//	| assertion=Assert)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"PAGE" '{' (storeAction=StoreAction | assertion=Assert)* '}'
		public Group getGroup() { return cGroup; }
		
		//"PAGE"
		public Keyword getPAGEKeyword_0() { return cPAGEKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(storeAction=StoreAction | assertion=Assert)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//storeAction=StoreAction
		public Assignment getStoreActionAssignment_2_0() { return cStoreActionAssignment_2_0; }
		
		//StoreAction
		public RuleCall getStoreActionStoreActionParserRuleCall_2_0_0() { return cStoreActionStoreActionParserRuleCall_2_0_0; }
		
		//assertion=Assert
		public Assignment getAssertionAssignment_2_1() { return cAssertionAssignment_2_1; }
		
		//Assert
		public RuleCall getAssertionAssertParserRuleCall_2_1_0() { return cAssertionAssertParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GeneralActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.GeneralAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSetActionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSetActionSetActionParserRuleCall_0_0 = (RuleCall)cSetActionAssignment_0.eContents().get(0);
		private final Assignment cStoreActionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStoreActionStoreActionParserRuleCall_1_0 = (RuleCall)cStoreActionAssignment_1.eContents().get(0);
		private final Assignment cSelectionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSelectionSelectionParserRuleCall_2_0 = (RuleCall)cSelectionAssignment_2.eContents().get(0);
		
		//GeneralAction:
		//	setAction=SetAction
		//	| storeAction=StoreAction
		//	| selection=Selection;
		@Override public ParserRule getRule() { return rule; }
		
		//setAction=SetAction | storeAction=StoreAction | selection=Selection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//setAction=SetAction
		public Assignment getSetActionAssignment_0() { return cSetActionAssignment_0; }
		
		//SetAction
		public RuleCall getSetActionSetActionParserRuleCall_0_0() { return cSetActionSetActionParserRuleCall_0_0; }
		
		//storeAction=StoreAction
		public Assignment getStoreActionAssignment_1() { return cStoreActionAssignment_1; }
		
		//StoreAction
		public RuleCall getStoreActionStoreActionParserRuleCall_1_0() { return cStoreActionStoreActionParserRuleCall_1_0; }
		
		//selection=Selection
		public Assignment getSelectionAssignment_2() { return cSelectionAssignment_2; }
		
		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_2_0() { return cSelectionSelectionParserRuleCall_2_0; }
	}
	public class StoreActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.StoreAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValAttributeEnumRuleCall_2_0_0 = (RuleCall)cValAssignment_2_0.eContents().get(0);
		private final Assignment cCountAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCountCountActionParserRuleCall_2_1_0 = (RuleCall)cCountAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVarAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVarVarParserRuleCall_5_0 = (RuleCall)cVarAssignment_5.eContents().get(0);
		
		//StoreAction:
		//	'store' '(' (val=Attribute | count=CountAction) ')' 'in' var=Var //TODO
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'store' '(' (val=Attribute | count=CountAction) ')' 'in' var=Var
		public Group getGroup() { return cGroup; }
		
		//'store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//val=Attribute | count=CountAction
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//val=Attribute
		public Assignment getValAssignment_2_0() { return cValAssignment_2_0; }
		
		//Attribute
		public RuleCall getValAttributeEnumRuleCall_2_0_0() { return cValAttributeEnumRuleCall_2_0_0; }
		
		//count=CountAction
		public Assignment getCountAssignment_2_1() { return cCountAssignment_2_1; }
		
		//CountAction
		public RuleCall getCountCountActionParserRuleCall_2_1_0() { return cCountCountActionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//var=Var
		public Assignment getVarAssignment_5() { return cVarAssignment_5; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_5_0() { return cVarVarParserRuleCall_5_0; }
	}
	public class CountActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.CountAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHtmlElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHtmlElementHtmlElementEnumRuleCall_1_0 = (RuleCall)cHtmlElementAssignment_1.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_2_0 = (RuleCall)cTypeSelectionAssignment_2.eContents().get(0);
		
		//CountAction:
		//	'count' htmlElement=HtmlElement typeSelection=TypeSelection;
		@Override public ParserRule getRule() { return rule; }
		
		//'count' htmlElement=HtmlElement typeSelection=TypeSelection
		public Group getGroup() { return cGroup; }
		
		//'count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//htmlElement=HtmlElement
		public Assignment getHtmlElementAssignment_1() { return cHtmlElementAssignment_1; }
		
		//HtmlElement
		public RuleCall getHtmlElementHtmlElementEnumRuleCall_1_0() { return cHtmlElementHtmlElementEnumRuleCall_1_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_2() { return cTypeSelectionAssignment_2; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_2_0() { return cTypeSelectionTypeSelectionParserRuleCall_2_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SetActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.SetAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeEnumRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////
		//SetAction:
		//	'set' attribute=Attribute ':' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' attribute=Attribute ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeEnumRuleCall_1_0() { return cAttributeAttributeEnumRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class TypeSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.TypeSelection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAttributeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAttributeAttributeEnumRuleCall_0_0_0 = (RuleCall)cAttributeAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_2_0_0 = (RuleCall)cValueAssignment_0_2_0.eContents().get(0);
		private final Assignment cVarAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final CrossReference cVarVarCrossReference_0_2_1_0 = (CrossReference)cVarAssignment_0_2_1.eContents().get(0);
		private final RuleCall cVarVarIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cVarVarCrossReference_0_2_1_0.eContents().get(1);
		private final Keyword cPARENTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFIRSTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLASTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cALLKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TypeSelection:
		//	attribute=Attribute ':' (value=STRING | var=[Var]) | "PARENT"
		//	| "FIRST"
		//	| "LAST"
		//	| "ALL";
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=Attribute ':' (value=STRING | var=[Var]) | "PARENT" | "FIRST" | "LAST" | "ALL"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attribute=Attribute ':' (value=STRING | var=[Var])
		public Group getGroup_0() { return cGroup_0; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_0_0() { return cAttributeAssignment_0_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeEnumRuleCall_0_0_0() { return cAttributeAttributeEnumRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//value=STRING | var=[Var]
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//value=STRING
		public Assignment getValueAssignment_0_2_0() { return cValueAssignment_0_2_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_2_0_0() { return cValueSTRINGTerminalRuleCall_0_2_0_0; }
		
		//var=[Var]
		public Assignment getVarAssignment_0_2_1() { return cVarAssignment_0_2_1; }
		
		//[Var]
		public CrossReference getVarVarCrossReference_0_2_1_0() { return cVarVarCrossReference_0_2_1_0; }
		
		//ID
		public RuleCall getVarVarIDTerminalRuleCall_0_2_1_0_1() { return cVarVarIDTerminalRuleCall_0_2_1_0_1; }
		
		//"PARENT"
		public Keyword getPARENTKeyword_1() { return cPARENTKeyword_1; }
		
		//"FIRST"
		public Keyword getFIRSTKeyword_2() { return cFIRSTKeyword_2; }
		
		//"LAST"
		public Keyword getLASTKeyword_3() { return cLASTKeyword_3; }
		
		//"ALL"
		public Keyword getALLKeyword_4() { return cALLKeyword_4; }
	}
	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAssertContainAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAssertContainAssertContainsParserRuleCall_1_0_0 = (RuleCall)cAssertContainAssignment_1_0.eContents().get(0);
		private final Assignment cAssertEqualsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAssertEqualsAssertEqualsParserRuleCall_1_1_0 = (RuleCall)cAssertEqualsAssignment_1_1.eContents().get(0);
		
		//Assert:
		//	"verify" (assertContain=AssertContains
		//	| assertEquals=AssertEquals);
		@Override public ParserRule getRule() { return rule; }
		
		//"verify" (assertContain=AssertContains | assertEquals=AssertEquals)
		public Group getGroup() { return cGroup; }
		
		//"verify"
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//assertContain=AssertContains | assertEquals=AssertEquals
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//assertContain=AssertContains
		public Assignment getAssertContainAssignment_1_0() { return cAssertContainAssignment_1_0; }
		
		//AssertContains
		public RuleCall getAssertContainAssertContainsParserRuleCall_1_0_0() { return cAssertContainAssertContainsParserRuleCall_1_0_0; }
		
		//assertEquals=AssertEquals
		public Assignment getAssertEqualsAssignment_1_1() { return cAssertEqualsAssignment_1_1; }
		
		//AssertEquals
		public RuleCall getAssertEqualsAssertEqualsParserRuleCall_1_1_0() { return cAssertEqualsAssertEqualsParserRuleCall_1_1_0; }
	}
	public class AssertContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.AssertContains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cHtmlElementAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cHtmlElementHtmlElementEnumRuleCall_1_0_0_0 = (RuleCall)cHtmlElementAssignment_1_0_0.eContents().get(0);
		private final Assignment cAttributeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAttributeAttributeEnumRuleCall_1_0_1_0 = (RuleCall)cAttributeAssignment_1_0_1.eContents().get(0);
		private final Keyword cTEXTKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AssertContains:
		//	'contains' (htmlElement=HtmlElement attribute=Attribute | 'TEXT') ':' STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'contains' (htmlElement=HtmlElement attribute=Attribute | 'TEXT') ':' STRING
		public Group getGroup() { return cGroup; }
		
		//'contains'
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//htmlElement=HtmlElement attribute=Attribute | 'TEXT'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//htmlElement=HtmlElement attribute=Attribute
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//htmlElement=HtmlElement
		public Assignment getHtmlElementAssignment_1_0_0() { return cHtmlElementAssignment_1_0_0; }
		
		//HtmlElement
		public RuleCall getHtmlElementHtmlElementEnumRuleCall_1_0_0_0() { return cHtmlElementHtmlElementEnumRuleCall_1_0_0_0; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_1_0_1() { return cAttributeAssignment_1_0_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeEnumRuleCall_1_0_1_0() { return cAttributeAttributeEnumRuleCall_1_0_1_0; }
		
		//'TEXT'
		public Keyword getTEXTKeyword_1_1() { return cTEXTKeyword_1_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
	}
	public class AssertEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.AssertEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC1ComparableParserRuleCall_0_0 = (RuleCall)cC1Assignment_0.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cC2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cC2ComparableParserRuleCall_2_0 = (RuleCall)cC2Assignment_2.eContents().get(0);
		
		//AssertEquals:
		//	c1=Comparable 'equals' c2=Comparable;
		@Override public ParserRule getRule() { return rule; }
		
		//c1=Comparable 'equals' c2=Comparable
		public Group getGroup() { return cGroup; }
		
		//c1=Comparable
		public Assignment getC1Assignment_0() { return cC1Assignment_0; }
		
		//Comparable
		public RuleCall getC1ComparableParserRuleCall_0_0() { return cC1ComparableParserRuleCall_0_0; }
		
		//'equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//c2=Comparable
		public Assignment getC2Assignment_2() { return cC2Assignment_2; }
		
		//Comparable
		public RuleCall getC2ComparableParserRuleCall_2_0() { return cC2ComparableParserRuleCall_2_0; }
	}
	public class ComparableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Comparable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVARKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHtmlElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHtmlElementHtmlElementEnumRuleCall_1_1_0 = (RuleCall)cHtmlElementAssignment_1_1.eContents().get(0);
		private final Assignment cAttributeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAttributeAttributeEnumRuleCall_1_2_0 = (RuleCall)cAttributeAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Comparable:
		//	'VAR:' var=Var
		//	| '(' htmlElement=HtmlElement attribute=Attribute ')'
		//	| STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'VAR:' var=Var | '(' htmlElement=HtmlElement attribute=Attribute ')' | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'VAR:' var=Var
		public Group getGroup_0() { return cGroup_0; }
		
		//'VAR:'
		public Keyword getVARKeyword_0_0() { return cVARKeyword_0_0; }
		
		//var=Var
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_0_1_0() { return cVarVarParserRuleCall_0_1_0; }
		
		//'(' htmlElement=HtmlElement attribute=Attribute ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//htmlElement=HtmlElement
		public Assignment getHtmlElementAssignment_1_1() { return cHtmlElementAssignment_1_1; }
		
		//HtmlElement
		public RuleCall getHtmlElementHtmlElementEnumRuleCall_1_1_0() { return cHtmlElementHtmlElementEnumRuleCall_1_1_0; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_1_2() { return cAttributeAssignment_1_2; }
		
		//Attribute
		public RuleCall getAttributeAttributeEnumRuleCall_1_2_0() { return cAttributeAttributeEnumRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	
	public class BrowserElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Browser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCHROMEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCHROMEChromeKeyword_0_0 = (Keyword)cCHROMEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFIREFOXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFIREFOXFirefoxKeyword_1_0 = (Keyword)cFIREFOXEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSAFARIEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSAFARISafariKeyword_2_0 = (Keyword)cSAFARIEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEDGEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEDGEEdgeKeyword_3_0 = (Keyword)cEDGEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIEIeKeyword_4_0 = (Keyword)cIEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Browser:
		//	CHROME="chrome"
		//	| FIREFOX="firefox"
		//	| SAFARI="safari"
		//	| EDGE="edge"
		//	| IE="ie";
		public EnumRule getRule() { return rule; }
		
		//CHROME="chrome" | FIREFOX="firefox" | SAFARI="safari" | EDGE="edge" | IE="ie"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CHROME="chrome"
		public EnumLiteralDeclaration getCHROMEEnumLiteralDeclaration_0() { return cCHROMEEnumLiteralDeclaration_0; }
		
		//"chrome"
		public Keyword getCHROMEChromeKeyword_0_0() { return cCHROMEChromeKeyword_0_0; }
		
		//FIREFOX="firefox"
		public EnumLiteralDeclaration getFIREFOXEnumLiteralDeclaration_1() { return cFIREFOXEnumLiteralDeclaration_1; }
		
		//"firefox"
		public Keyword getFIREFOXFirefoxKeyword_1_0() { return cFIREFOXFirefoxKeyword_1_0; }
		
		//SAFARI="safari"
		public EnumLiteralDeclaration getSAFARIEnumLiteralDeclaration_2() { return cSAFARIEnumLiteralDeclaration_2; }
		
		//"safari"
		public Keyword getSAFARISafariKeyword_2_0() { return cSAFARISafariKeyword_2_0; }
		
		//EDGE="edge"
		public EnumLiteralDeclaration getEDGEEnumLiteralDeclaration_3() { return cEDGEEnumLiteralDeclaration_3; }
		
		//"edge"
		public Keyword getEDGEEdgeKeyword_3_0() { return cEDGEEdgeKeyword_3_0; }
		
		//IE="ie"
		public EnumLiteralDeclaration getIEEnumLiteralDeclaration_4() { return cIEEnumLiteralDeclaration_4; }
		
		//"ie"
		public Keyword getIEIeKeyword_4_0() { return cIEIeKeyword_4_0; }
	}
	public class HtmlElementElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.HtmlElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLINKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLINKLINKKeyword_0_0 = (Keyword)cLINKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBUTTONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBUTTONBUTTONKeyword_1_0 = (Keyword)cBUTTONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHECKBOXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHECKBOXCHECKBOXKeyword_2_0 = (Keyword)cCHECKBOXEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMBOBOXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMBOBOXCOMBO_BOXKeyword_3_0 = (Keyword)cCOMBOBOXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDIVDIVKeyword_4_0 = (Keyword)cDIVEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIMAGEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIMAGEIMAGEKeyword_5_0 = (Keyword)cIMAGEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAAKeyword_6_0 = (Keyword)cAEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum HtmlElement:
		//	LINK | BUTTON | CHECKBOX | COMBOBOX="COMBO_BOX"
		//	| DIV | IMAGE | A;
		public EnumRule getRule() { return rule; }
		
		//LINK | BUTTON | CHECKBOX | COMBOBOX="COMBO_BOX" | DIV | IMAGE | A
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LINK
		public EnumLiteralDeclaration getLINKEnumLiteralDeclaration_0() { return cLINKEnumLiteralDeclaration_0; }
		
		//"LINK"
		public Keyword getLINKLINKKeyword_0_0() { return cLINKLINKKeyword_0_0; }
		
		//BUTTON
		public EnumLiteralDeclaration getBUTTONEnumLiteralDeclaration_1() { return cBUTTONEnumLiteralDeclaration_1; }
		
		//"BUTTON"
		public Keyword getBUTTONBUTTONKeyword_1_0() { return cBUTTONBUTTONKeyword_1_0; }
		
		//CHECKBOX
		public EnumLiteralDeclaration getCHECKBOXEnumLiteralDeclaration_2() { return cCHECKBOXEnumLiteralDeclaration_2; }
		
		//"CHECKBOX"
		public Keyword getCHECKBOXCHECKBOXKeyword_2_0() { return cCHECKBOXCHECKBOXKeyword_2_0; }
		
		//COMBOBOX="COMBO_BOX"
		public EnumLiteralDeclaration getCOMBOBOXEnumLiteralDeclaration_3() { return cCOMBOBOXEnumLiteralDeclaration_3; }
		
		//"COMBO_BOX"
		public Keyword getCOMBOBOXCOMBO_BOXKeyword_3_0() { return cCOMBOBOXCOMBO_BOXKeyword_3_0; }
		
		//DIV
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_4() { return cDIVEnumLiteralDeclaration_4; }
		
		//"DIV"
		public Keyword getDIVDIVKeyword_4_0() { return cDIVDIVKeyword_4_0; }
		
		//IMAGE
		public EnumLiteralDeclaration getIMAGEEnumLiteralDeclaration_5() { return cIMAGEEnumLiteralDeclaration_5; }
		
		//"IMAGE"
		public Keyword getIMAGEIMAGEKeyword_5_0() { return cIMAGEIMAGEKeyword_5_0; }
		
		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_6() { return cAEnumLiteralDeclaration_6; }
		
		//"A"
		public Keyword getAAKeyword_6_0() { return cAAKeyword_6_0; }
	}
	public class AttributeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.imta.renaud.ssinigaglia.WebDsl.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLABELEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLABELLABELKeyword_0_0 = (Keyword)cLABELEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIDIDKeyword_1_0 = (Keyword)cIDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLASSCLASSKeyword_2_0 = (Keyword)cCLASSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cALTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cALTALTKeyword_3_0 = (Keyword)cALTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVALUEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVALUEVALUEKeyword_4_0 = (Keyword)cVALUEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHREFEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHREFHREFKeyword_5_0 = (Keyword)cHREFEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTITLEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTITLETITLEKeyword_6_0 = (Keyword)cTITLEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Attribute:
		//	LABEL | ID | CLASS | ALT | VALUE | HREF | TITLE;
		public EnumRule getRule() { return rule; }
		
		//LABEL | ID | CLASS | ALT | VALUE | HREF | TITLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LABEL
		public EnumLiteralDeclaration getLABELEnumLiteralDeclaration_0() { return cLABELEnumLiteralDeclaration_0; }
		
		//"LABEL"
		public Keyword getLABELLABELKeyword_0_0() { return cLABELLABELKeyword_0_0; }
		
		//ID
		public EnumLiteralDeclaration getIDEnumLiteralDeclaration_1() { return cIDEnumLiteralDeclaration_1; }
		
		//"ID"
		public Keyword getIDIDKeyword_1_0() { return cIDIDKeyword_1_0; }
		
		//CLASS
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_2() { return cCLASSEnumLiteralDeclaration_2; }
		
		//"CLASS"
		public Keyword getCLASSCLASSKeyword_2_0() { return cCLASSCLASSKeyword_2_0; }
		
		//ALT
		public EnumLiteralDeclaration getALTEnumLiteralDeclaration_3() { return cALTEnumLiteralDeclaration_3; }
		
		//"ALT"
		public Keyword getALTALTKeyword_3_0() { return cALTALTKeyword_3_0; }
		
		//VALUE
		public EnumLiteralDeclaration getVALUEEnumLiteralDeclaration_4() { return cVALUEEnumLiteralDeclaration_4; }
		
		//"VALUE"
		public Keyword getVALUEVALUEKeyword_4_0() { return cVALUEVALUEKeyword_4_0; }
		
		//HREF
		public EnumLiteralDeclaration getHREFEnumLiteralDeclaration_5() { return cHREFEnumLiteralDeclaration_5; }
		
		//"HREF"
		public Keyword getHREFHREFKeyword_5_0() { return cHREFHREFKeyword_5_0; }
		
		//TITLE
		public EnumLiteralDeclaration getTITLEEnumLiteralDeclaration_6() { return cTITLEEnumLiteralDeclaration_6; }
		
		//"TITLE"
		public Keyword getTITLETITLEKeyword_6_0() { return cTITLETITLEKeyword_6_0; }
	}
	
	private final ProgramElements pProgram;
	private final CoreElements pCore;
	private final ProcedureElements pProcedure;
	private final BrowserElements eBrowser;
	private final ActionElements pAction;
	private final CallProcedureElements pCallProcedure;
	private final GoActionElements pGoAction;
	private final SelectionElements pSelection;
	private final LinkButtonSelectionElements pLinkButtonSelection;
	private final GeneralSelectionElements pGeneralSelection;
	private final CheckboxSelectionElements pCheckboxSelection;
	private final ComboboxSelectionElements pComboboxSelection;
	private final PageSelectionElements pPageSelection;
	private final GeneralActionElements pGeneralAction;
	private final StoreActionElements pStoreAction;
	private final CountActionElements pCountAction;
	private final VarElements pVar;
	private final SetActionElements pSetAction;
	private final TypeSelectionElements pTypeSelection;
	private final AssertElements pAssert;
	private final AssertContainsElements pAssertContains;
	private final AssertEqualsElements pAssertEquals;
	private final ComparableElements pComparable;
	private final HtmlElementElements eHtmlElement;
	private final AttributeElements eAttribute;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WebDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCore = new CoreElements();
		this.pProcedure = new ProcedureElements();
		this.eBrowser = new BrowserElements();
		this.pAction = new ActionElements();
		this.pCallProcedure = new CallProcedureElements();
		this.pGoAction = new GoActionElements();
		this.pSelection = new SelectionElements();
		this.pLinkButtonSelection = new LinkButtonSelectionElements();
		this.pGeneralSelection = new GeneralSelectionElements();
		this.pCheckboxSelection = new CheckboxSelectionElements();
		this.pComboboxSelection = new ComboboxSelectionElements();
		this.pPageSelection = new PageSelectionElements();
		this.pGeneralAction = new GeneralActionElements();
		this.pStoreAction = new StoreActionElements();
		this.pCountAction = new CountActionElements();
		this.pVar = new VarElements();
		this.pSetAction = new SetActionElements();
		this.pTypeSelection = new TypeSelectionElements();
		this.pAssert = new AssertElements();
		this.pAssertContains = new AssertContainsElements();
		this.pAssertEquals = new AssertEqualsElements();
		this.pComparable = new ComparableElements();
		this.eHtmlElement = new HtmlElementElements();
		this.eAttribute = new AttributeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.imta.renaud.ssinigaglia.WebDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	procedures+=Procedure*
	//	core=Core;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Core:
	//	'open_browser' name=Browser
	//	actions+=Action*;
	public CoreElements getCoreAccess() {
		return pCore;
	}
	
	public ParserRule getCoreRule() {
		return getCoreAccess().getRule();
	}
	
	//Procedure:
	//	'PROCEDURE' name=ID '(' var=Var '){'
	//	actions+=Action*
	//	'}';
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//enum Browser:
	//	CHROME="chrome"
	//	| FIREFOX="firefox"
	//	| SAFARI="safari"
	//	| EDGE="edge"
	//	| IE="ie";
	public BrowserElements getBrowserAccess() {
		return eBrowser;
	}
	
	public EnumRule getBrowserRule() {
		return getBrowserAccess().getRule();
	}
	
	//Action:
	//	goAction=GoAction | selection=Selection | callProcedure=CallProcedure;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//CallProcedure:
	//	'PROC:' ref=[Procedure] '(' arg=STRING ')';
	public CallProcedureElements getCallProcedureAccess() {
		return pCallProcedure;
	}
	
	public ParserRule getCallProcedureRule() {
		return getCallProcedureAccess().getRule();
	}
	
	//GoAction:
	//	'go' name=STRING;
	public GoActionElements getGoActionAccess() {
		return pGoAction;
	}
	
	public ParserRule getGoActionRule() {
		return getGoActionAccess().getRule();
	}
	
	//Selection:
	//	linkButtonSelection=LinkButtonSelection
	//	| generalSelection=GeneralSelection
	//	| checkboxSelection=CheckboxSelection
	//	| comboboxSelection=ComboboxSelection
	//	| pageSelection=PageSelection;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}
	
	//LinkButtonSelection:
	//	("LINK" | "BUTTON") typeSelection=TypeSelection '{' (generalActions+=GeneralAction | 'click')*
	//	'}';
	public LinkButtonSelectionElements getLinkButtonSelectionAccess() {
		return pLinkButtonSelection;
	}
	
	public ParserRule getLinkButtonSelectionRule() {
		return getLinkButtonSelectionAccess().getRule();
	}
	
	//GeneralSelection:
	//	("SEARCH_FIELD" | "DIV" | "A") typeSelection=TypeSelection '{'
	//	generalActions+=GeneralAction*
	//	'}';
	public GeneralSelectionElements getGeneralSelectionAccess() {
		return pGeneralSelection;
	}
	
	public ParserRule getGeneralSelectionRule() {
		return getGeneralSelectionAccess().getRule();
	}
	
	//CheckboxSelection:
	//	"CHECKBOX" typeSelection=TypeSelection '{' (generalActions+=GeneralAction
	//	| 'check'
	//	| 'uncheck')*
	//	'}';
	public CheckboxSelectionElements getCheckboxSelectionAccess() {
		return pCheckboxSelection;
	}
	
	public ParserRule getCheckboxSelectionRule() {
		return getCheckboxSelectionAccess().getRule();
	}
	
	//ComboboxSelection:
	//	"COMBO_BOX" typeSelection=TypeSelection '{' (generalActions+=GeneralAction
	//	| 'select' STRING)*
	//	'}';
	public ComboboxSelectionElements getComboboxSelectionAccess() {
		return pComboboxSelection;
	}
	
	public ParserRule getComboboxSelectionRule() {
		return getComboboxSelectionAccess().getRule();
	}
	
	//PageSelection:
	//	"PAGE" '{' (storeAction=StoreAction
	//	| assertion=Assert)*
	//	'}';
	public PageSelectionElements getPageSelectionAccess() {
		return pPageSelection;
	}
	
	public ParserRule getPageSelectionRule() {
		return getPageSelectionAccess().getRule();
	}
	
	//GeneralAction:
	//	setAction=SetAction
	//	| storeAction=StoreAction
	//	| selection=Selection;
	public GeneralActionElements getGeneralActionAccess() {
		return pGeneralAction;
	}
	
	public ParserRule getGeneralActionRule() {
		return getGeneralActionAccess().getRule();
	}
	
	//StoreAction:
	//	'store' '(' (val=Attribute | count=CountAction) ')' 'in' var=Var //TODO
	//;
	public StoreActionElements getStoreActionAccess() {
		return pStoreAction;
	}
	
	public ParserRule getStoreActionRule() {
		return getStoreActionAccess().getRule();
	}
	
	//CountAction:
	//	'count' htmlElement=HtmlElement typeSelection=TypeSelection;
	public CountActionElements getCountActionAccess() {
		return pCountAction;
	}
	
	public ParserRule getCountActionRule() {
		return getCountActionAccess().getRule();
	}
	
	//Var:
	//	name=ID;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	////
	//SetAction:
	//	'set' attribute=Attribute ':' value=STRING;
	public SetActionElements getSetActionAccess() {
		return pSetAction;
	}
	
	public ParserRule getSetActionRule() {
		return getSetActionAccess().getRule();
	}
	
	//TypeSelection:
	//	attribute=Attribute ':' (value=STRING | var=[Var]) | "PARENT"
	//	| "FIRST"
	//	| "LAST"
	//	| "ALL";
	public TypeSelectionElements getTypeSelectionAccess() {
		return pTypeSelection;
	}
	
	public ParserRule getTypeSelectionRule() {
		return getTypeSelectionAccess().getRule();
	}
	
	//Assert:
	//	"verify" (assertContain=AssertContains
	//	| assertEquals=AssertEquals);
	public AssertElements getAssertAccess() {
		return pAssert;
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}
	
	//AssertContains:
	//	'contains' (htmlElement=HtmlElement attribute=Attribute | 'TEXT') ':' STRING;
	public AssertContainsElements getAssertContainsAccess() {
		return pAssertContains;
	}
	
	public ParserRule getAssertContainsRule() {
		return getAssertContainsAccess().getRule();
	}
	
	//AssertEquals:
	//	c1=Comparable 'equals' c2=Comparable;
	public AssertEqualsElements getAssertEqualsAccess() {
		return pAssertEquals;
	}
	
	public ParserRule getAssertEqualsRule() {
		return getAssertEqualsAccess().getRule();
	}
	
	//Comparable:
	//	'VAR:' var=Var
	//	| '(' htmlElement=HtmlElement attribute=Attribute ')'
	//	| STRING;
	public ComparableElements getComparableAccess() {
		return pComparable;
	}
	
	public ParserRule getComparableRule() {
		return getComparableAccess().getRule();
	}
	
	//enum HtmlElement:
	//	LINK | BUTTON | CHECKBOX | COMBOBOX="COMBO_BOX"
	//	| DIV | IMAGE | A;
	public HtmlElementElements getHtmlElementAccess() {
		return eHtmlElement;
	}
	
	public EnumRule getHtmlElementRule() {
		return getHtmlElementAccess().getRule();
	}
	
	//enum Attribute:
	//	LABEL | ID | CLASS | ALT | VALUE | HREF | TITLE;
	public AttributeElements getAttributeAccess() {
		return eAttribute;
	}
	
	public EnumRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
