/*
 * generated by Xtext 2.12.0
 */
package org.imt.sinigaglia.renaud.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TestdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Program");
		private final Assignment cCoreAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCoreCoreParserRuleCall_0 = (RuleCall)cCoreAssignment.eContents().get(0);
		
		//Program:
		//	core=Core;
		@Override public ParserRule getRule() { return rule; }
		
		////procedures += Procedure*
		//core=Core
		public Assignment getCoreAssignment() { return cCoreAssignment; }
		
		//Core
		public RuleCall getCoreCoreParserRuleCall_0() { return cCoreCoreParserRuleCall_0; }
	}
	public class CoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Core");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenBrowserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBrowserParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		
		//Core:
		//	'open browser' name=Browser
		//	actions+=Action*;
		@Override public ParserRule getRule() { return rule; }
		
		//'open browser' name=Browser actions+=Action*
		public Group getGroup() { return cGroup; }
		
		//'open browser'
		public Keyword getOpenBrowserKeyword_0() { return cOpenBrowserKeyword_0; }
		
		//name=Browser
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Browser
		public RuleCall getNameBrowserParserRuleCall_1_0() { return cNameBrowserParserRuleCall_1_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
	}
	public class BrowserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Browser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cChromeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFirefoxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSafariKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEdgeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Browser:
		//	"chrome" | "firefox" | "safari" | "edge" | "ie";
		@Override public ParserRule getRule() { return rule; }
		
		//"chrome" | "firefox" | "safari" | "edge" | "ie"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"chrome"
		public Keyword getChromeKeyword_0() { return cChromeKeyword_0; }
		
		//"firefox"
		public Keyword getFirefoxKeyword_1() { return cFirefoxKeyword_1; }
		
		//"safari"
		public Keyword getSafariKeyword_2() { return cSafariKeyword_2; }
		
		//"edge"
		public Keyword getEdgeKeyword_3() { return cEdgeKeyword_3; }
		
		//"ie"
		public Keyword getIeKeyword_4() { return cIeKeyword_4; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGoActionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGoActionsGoActionParserRuleCall_0_0 = (RuleCall)cGoActionsAssignment_0.eContents().get(0);
		private final Assignment cSelectionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionsSelectionParserRuleCall_1_0 = (RuleCall)cSelectionsAssignment_1.eContents().get(0);
		
		//Action:
		//	goActions+=GoAction* | selections+=Selection*;
		@Override public ParserRule getRule() { return rule; }
		
		//goActions+=GoAction* | selections+=Selection*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//goActions+=GoAction*
		public Assignment getGoActionsAssignment_0() { return cGoActionsAssignment_0; }
		
		//GoAction
		public RuleCall getGoActionsGoActionParserRuleCall_0_0() { return cGoActionsGoActionParserRuleCall_0_0; }
		
		//selections+=Selection*
		public Assignment getSelectionsAssignment_1() { return cSelectionsAssignment_1; }
		
		//Selection
		public RuleCall getSelectionsSelectionParserRuleCall_1_0() { return cSelectionsSelectionParserRuleCall_1_0; }
	}
	public class GoActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.GoAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GoAction:
		//	'go' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'go' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Selection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLinkButtonSelectionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLinkButtonSelectionLinkButtonSelectionParserRuleCall_0_0 = (RuleCall)cLinkButtonSelectionAssignment_0.eContents().get(0);
		private final Assignment cSearchfieldSelectionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSearchfieldSelectionSearchfieldSelectionParserRuleCall_1_0 = (RuleCall)cSearchfieldSelectionAssignment_1.eContents().get(0);
		private final Assignment cCheckboxSelectionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCheckboxSelectionCheckboxSelectionParserRuleCall_2_0 = (RuleCall)cCheckboxSelectionAssignment_2.eContents().get(0);
		private final Assignment cComboboxSelectionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cComboboxSelectionComboboxSelectionParserRuleCall_3_0 = (RuleCall)cComboboxSelectionAssignment_3.eContents().get(0);
		private final Assignment cDivSelectionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDivSelectionDivSelectionParserRuleCall_4_0 = (RuleCall)cDivSelectionAssignment_4.eContents().get(0);
		
		//Selection:
		//	linkButtonSelection=LinkButtonSelection | searchfieldSelection=SearchfieldSelection |
		//	checkboxSelection=CheckboxSelection | comboboxSelection=ComboboxSelection | divSelection=DivSelection;
		@Override public ParserRule getRule() { return rule; }
		
		//linkButtonSelection=LinkButtonSelection | searchfieldSelection=SearchfieldSelection |
		//checkboxSelection=CheckboxSelection | comboboxSelection=ComboboxSelection | divSelection=DivSelection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//linkButtonSelection=LinkButtonSelection
		public Assignment getLinkButtonSelectionAssignment_0() { return cLinkButtonSelectionAssignment_0; }
		
		//LinkButtonSelection
		public RuleCall getLinkButtonSelectionLinkButtonSelectionParserRuleCall_0_0() { return cLinkButtonSelectionLinkButtonSelectionParserRuleCall_0_0; }
		
		//searchfieldSelection=SearchfieldSelection
		public Assignment getSearchfieldSelectionAssignment_1() { return cSearchfieldSelectionAssignment_1; }
		
		//SearchfieldSelection
		public RuleCall getSearchfieldSelectionSearchfieldSelectionParserRuleCall_1_0() { return cSearchfieldSelectionSearchfieldSelectionParserRuleCall_1_0; }
		
		//checkboxSelection=CheckboxSelection
		public Assignment getCheckboxSelectionAssignment_2() { return cCheckboxSelectionAssignment_2; }
		
		//CheckboxSelection
		public RuleCall getCheckboxSelectionCheckboxSelectionParserRuleCall_2_0() { return cCheckboxSelectionCheckboxSelectionParserRuleCall_2_0; }
		
		//comboboxSelection=ComboboxSelection
		public Assignment getComboboxSelectionAssignment_3() { return cComboboxSelectionAssignment_3; }
		
		//ComboboxSelection
		public RuleCall getComboboxSelectionComboboxSelectionParserRuleCall_3_0() { return cComboboxSelectionComboboxSelectionParserRuleCall_3_0; }
		
		//divSelection=DivSelection
		public Assignment getDivSelectionAssignment_4() { return cDivSelectionAssignment_4; }
		
		//DivSelection
		public RuleCall getDivSelectionDivSelectionParserRuleCall_4_0() { return cDivSelectionDivSelectionParserRuleCall_4_0; }
	}
	public class LinkButtonSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.LinkButtonSelection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLINKKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBUTTONKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_1_0 = (RuleCall)cTypeSelectionAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cGeneralActionsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cGeneralActionsGeneralActionParserRuleCall_1_3_0 = (RuleCall)cGeneralActionsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cClickKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//LinkButtonSelection:
		//	"LINK" | "BUTTON" typeSelection=TypeSelection '{'
		//	generalActions=GeneralAction |
		//	'click'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"LINK" | "BUTTON" typeSelection=TypeSelection '{' generalActions=GeneralAction | 'click' '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"LINK"
		public Keyword getLINKKeyword_0() { return cLINKKeyword_0; }
		
		//"BUTTON" typeSelection=TypeSelection '{' generalActions=GeneralAction
		public Group getGroup_1() { return cGroup_1; }
		
		//"BUTTON"
		public Keyword getBUTTONKeyword_1_0() { return cBUTTONKeyword_1_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1_1() { return cTypeSelectionAssignment_1_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//generalActions=GeneralAction
		public Assignment getGeneralActionsAssignment_1_3() { return cGeneralActionsAssignment_1_3; }
		
		//GeneralAction
		public RuleCall getGeneralActionsGeneralActionParserRuleCall_1_3_0() { return cGeneralActionsGeneralActionParserRuleCall_1_3_0; }
		
		//'click' '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//'click'
		public Keyword getClickKeyword_2_0() { return cClickKeyword_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}
	public class SearchfieldSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.SearchfieldSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSEARCH_FIELDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeneralActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeneralActionGeneralActionParserRuleCall_3_0 = (RuleCall)cGeneralActionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SearchfieldSelection:
		//	"SEARCH_FIELD" typeSelection=TypeSelection '{'
		//	generalAction=GeneralAction
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"SEARCH_FIELD" typeSelection=TypeSelection '{' generalAction=GeneralAction '}'
		public Group getGroup() { return cGroup; }
		
		//"SEARCH_FIELD"
		public Keyword getSEARCH_FIELDKeyword_0() { return cSEARCH_FIELDKeyword_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//generalAction=GeneralAction
		public Assignment getGeneralActionAssignment_3() { return cGeneralActionAssignment_3; }
		
		//GeneralAction
		public RuleCall getGeneralActionGeneralActionParserRuleCall_3_0() { return cGeneralActionGeneralActionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CheckboxSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.CheckboxSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHECKBOXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cGeneralActionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cGeneralActionGeneralActionParserRuleCall_3_0_0 = (RuleCall)cGeneralActionAssignment_3_0.eContents().get(0);
		private final Keyword cCheckKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cUncheckKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CheckboxSelection:
		//	"CHECKBOX" typeSelection=TypeSelection '{' (generalAction=GeneralAction |
		//	'check' |
		//	'uncheck')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"CHECKBOX" typeSelection=TypeSelection '{' (generalAction=GeneralAction | 'check' | 'uncheck') '}'
		public Group getGroup() { return cGroup; }
		
		//"CHECKBOX"
		public Keyword getCHECKBOXKeyword_0() { return cCHECKBOXKeyword_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//generalAction=GeneralAction | 'check' | 'uncheck'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//generalAction=GeneralAction
		public Assignment getGeneralActionAssignment_3_0() { return cGeneralActionAssignment_3_0; }
		
		//GeneralAction
		public RuleCall getGeneralActionGeneralActionParserRuleCall_3_0_0() { return cGeneralActionGeneralActionParserRuleCall_3_0_0; }
		
		//'check'
		public Keyword getCheckKeyword_3_1() { return cCheckKeyword_3_1; }
		
		//'uncheck'
		public Keyword getUncheckKeyword_3_2() { return cUncheckKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComboboxSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.ComboboxSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOMBO_BOXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_1_0 = (RuleCall)cTypeSelectionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cGeneralActionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cGeneralActionGeneralActionParserRuleCall_3_0_0 = (RuleCall)cGeneralActionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cSelectKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComboboxSelection:
		//	"COMBO_BOX" typeSelection=TypeSelection '{' (generalAction=GeneralAction |
		//	'select' value=STRING)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"COMBO_BOX" typeSelection=TypeSelection '{' (generalAction=GeneralAction | 'select' value=STRING) '}'
		public Group getGroup() { return cGroup; }
		
		//"COMBO_BOX"
		public Keyword getCOMBO_BOXKeyword_0() { return cCOMBO_BOXKeyword_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_1() { return cTypeSelectionAssignment_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//generalAction=GeneralAction | 'select' value=STRING
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//generalAction=GeneralAction
		public Assignment getGeneralActionAssignment_3_0() { return cGeneralActionAssignment_3_0; }
		
		//GeneralAction
		public RuleCall getGeneralActionGeneralActionParserRuleCall_3_0_0() { return cGeneralActionGeneralActionParserRuleCall_3_0_0; }
		
		//'select' value=STRING
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'select'
		public Keyword getSelectKeyword_3_1_0() { return cSelectKeyword_3_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1_1() { return cValueAssignment_3_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_1_0() { return cValueSTRINGTerminalRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DivSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.DivSelection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDIVKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeSelectionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeSelectionTypeSelectionParserRuleCall_0_1_0 = (RuleCall)cTypeSelectionAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cGeneralActionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cGeneralActionGeneralActionParserRuleCall_0_3_0 = (RuleCall)cGeneralActionAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cClickKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//DivSelection:
		//	"DIV" typeSelection=TypeSelection '{'
		//	generalAction=GeneralAction |
		//	'click'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"DIV" typeSelection=TypeSelection '{' generalAction=GeneralAction | 'click' '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"DIV" typeSelection=TypeSelection '{' generalAction=GeneralAction
		public Group getGroup_0() { return cGroup_0; }
		
		//"DIV"
		public Keyword getDIVKeyword_0_0() { return cDIVKeyword_0_0; }
		
		//typeSelection=TypeSelection
		public Assignment getTypeSelectionAssignment_0_1() { return cTypeSelectionAssignment_0_1; }
		
		//TypeSelection
		public RuleCall getTypeSelectionTypeSelectionParserRuleCall_0_1_0() { return cTypeSelectionTypeSelectionParserRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//generalAction=GeneralAction
		public Assignment getGeneralActionAssignment_0_3() { return cGeneralActionAssignment_0_3; }
		
		//GeneralAction
		public RuleCall getGeneralActionGeneralActionParserRuleCall_0_3_0() { return cGeneralActionGeneralActionParserRuleCall_0_3_0; }
		
		//'click' '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'click'
		public Keyword getClickKeyword_1_0() { return cClickKeyword_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}
	public class GeneralActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.GeneralAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSetActionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSetActionSetActionParserRuleCall_0_0 = (RuleCall)cSetActionAssignment_0.eContents().get(0);
		private final Assignment cStoreActionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStoreActionStoreActionParserRuleCall_1_0 = (RuleCall)cStoreActionAssignment_1.eContents().get(0);
		
		//GeneralAction:
		//	setAction=SetAction | storeAction=StoreAction;
		@Override public ParserRule getRule() { return rule; }
		
		//setAction=SetAction | storeAction=StoreAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//setAction=SetAction
		public Assignment getSetActionAssignment_0() { return cSetActionAssignment_0; }
		
		//SetAction
		public RuleCall getSetActionSetActionParserRuleCall_0_0() { return cSetActionSetActionParserRuleCall_0_0; }
		
		//storeAction=StoreAction
		public Assignment getStoreActionAssignment_1() { return cStoreActionAssignment_1; }
		
		//StoreAction
		public RuleCall getStoreActionStoreActionParserRuleCall_1_0() { return cStoreActionStoreActionParserRuleCall_1_0; }
	}
	public class StoreActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.StoreAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarVarParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		
		//StoreAction:
		//	'store' '()' 'in' var=Var;
		@Override public ParserRule getRule() { return rule; }
		
		//'store' '()' 'in' var=Var
		public Group getGroup() { return cGroup; }
		
		//'store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//var=Var
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_3_0() { return cVarVarParserRuleCall_3_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class SetActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.SetAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SetAction:
		//	'set' attribute=Attribute ':' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' attribute=Attribute ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_1_0() { return cAttributeAttributeParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPAGEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Assignment cHtmlElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cHtmlElementHTMLElementParserRuleCall_1_0 = (RuleCall)cHtmlElementAssignment_1.eContents().get(0);
		
		//Element:
		//	"PAGE" | htmlElement=HTMLElement;
		@Override public ParserRule getRule() { return rule; }
		
		//"PAGE" | htmlElement=HTMLElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"PAGE"
		public Keyword getPAGEKeyword_0() { return cPAGEKeyword_0; }
		
		//htmlElement=HTMLElement
		public Assignment getHtmlElementAssignment_1() { return cHtmlElementAssignment_1; }
		
		//HTMLElement
		public RuleCall getHtmlElementHTMLElementParserRuleCall_1_0() { return cHtmlElementHTMLElementParserRuleCall_1_0; }
	}
	public class HTMLElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.HTMLElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSEARCH_FIELDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBUTTONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLINKKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCHECKBOXKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCOMBO_BOXKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDIVKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIMAGEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//HTMLElement:
		//	"SEARCH_FIELD" | "BUTTON" | "LINK" | "CHECKBOX" | "COMBO_BOX" | "DIV" | "IMAGE";
		@Override public ParserRule getRule() { return rule; }
		
		//"SEARCH_FIELD" | "BUTTON" | "LINK" | "CHECKBOX" | "COMBO_BOX" | "DIV" | "IMAGE"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"SEARCH_FIELD"
		public Keyword getSEARCH_FIELDKeyword_0() { return cSEARCH_FIELDKeyword_0; }
		
		//"BUTTON"
		public Keyword getBUTTONKeyword_1() { return cBUTTONKeyword_1; }
		
		//"LINK"
		public Keyword getLINKKeyword_2() { return cLINKKeyword_2; }
		
		//"CHECKBOX"
		public Keyword getCHECKBOXKeyword_3() { return cCHECKBOXKeyword_3; }
		
		//"COMBO_BOX"
		public Keyword getCOMBO_BOXKeyword_4() { return cCOMBO_BOXKeyword_4; }
		
		//"DIV"
		public Keyword getDIVKeyword_5() { return cDIVKeyword_5; }
		
		//"IMAGE"
		public Keyword getIMAGEKeyword_6() { return cIMAGEKeyword_6; }
	}
	public class TypeSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.TypeSelection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAttributeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAttributeAttributeParserRuleCall_0_0_0 = (RuleCall)cAttributeAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cPARENTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFIRSTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLASTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cALLKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TypeSelection:
		//	attribute=Attribute ':' value=STRING |
		//	"PARENT" |
		//	"FIRST" |
		//	"LAST" |
		//	"ALL";
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=Attribute ':' value=STRING | "PARENT" | "FIRST" | "LAST" | "ALL"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attribute=Attribute ':' value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_0_0() { return cAttributeAssignment_0_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_0_0_0() { return cAttributeAttributeParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_2_0() { return cValueSTRINGTerminalRuleCall_0_2_0; }
		
		//"PARENT"
		public Keyword getPARENTKeyword_1() { return cPARENTKeyword_1; }
		
		//"FIRST"
		public Keyword getFIRSTKeyword_2() { return cFIRSTKeyword_2; }
		
		//"LAST"
		public Keyword getLASTKeyword_3() { return cLASTKeyword_3; }
		
		//"ALL"
		public Keyword getALLKeyword_4() { return cALLKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.imt.sinigaglia.renaud.Testdsl.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLABELKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCLASSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cALTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVALUEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHREFKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTITLEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Attribute:
		//	"LABEL" | "ID" | "CLASS" | "ALT" | "VALUE" | "HREF" | "TITLE";
		@Override public ParserRule getRule() { return rule; }
		
		//"LABEL" | "ID" | "CLASS" | "ALT" | "VALUE" | "HREF" | "TITLE"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"LABEL"
		public Keyword getLABELKeyword_0() { return cLABELKeyword_0; }
		
		//"ID"
		public Keyword getIDKeyword_1() { return cIDKeyword_1; }
		
		//"CLASS"
		public Keyword getCLASSKeyword_2() { return cCLASSKeyword_2; }
		
		//"ALT"
		public Keyword getALTKeyword_3() { return cALTKeyword_3; }
		
		//"VALUE"
		public Keyword getVALUEKeyword_4() { return cVALUEKeyword_4; }
		
		//"HREF"
		public Keyword getHREFKeyword_5() { return cHREFKeyword_5; }
		
		//"TITLE"
		public Keyword getTITLEKeyword_6() { return cTITLEKeyword_6; }
	}
	
	
	private final ProgramElements pProgram;
	private final CoreElements pCore;
	private final BrowserElements pBrowser;
	private final ActionElements pAction;
	private final GoActionElements pGoAction;
	private final SelectionElements pSelection;
	private final LinkButtonSelectionElements pLinkButtonSelection;
	private final SearchfieldSelectionElements pSearchfieldSelection;
	private final CheckboxSelectionElements pCheckboxSelection;
	private final ComboboxSelectionElements pComboboxSelection;
	private final DivSelectionElements pDivSelection;
	private final GeneralActionElements pGeneralAction;
	private final StoreActionElements pStoreAction;
	private final VarElements pVar;
	private final SetActionElements pSetAction;
	private final ElementElements pElement;
	private final HTMLElementElements pHTMLElement;
	private final TypeSelectionElements pTypeSelection;
	private final AttributeElements pAttribute;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TestdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCore = new CoreElements();
		this.pBrowser = new BrowserElements();
		this.pAction = new ActionElements();
		this.pGoAction = new GoActionElements();
		this.pSelection = new SelectionElements();
		this.pLinkButtonSelection = new LinkButtonSelectionElements();
		this.pSearchfieldSelection = new SearchfieldSelectionElements();
		this.pCheckboxSelection = new CheckboxSelectionElements();
		this.pComboboxSelection = new ComboboxSelectionElements();
		this.pDivSelection = new DivSelectionElements();
		this.pGeneralAction = new GeneralActionElements();
		this.pStoreAction = new StoreActionElements();
		this.pVar = new VarElements();
		this.pSetAction = new SetActionElements();
		this.pElement = new ElementElements();
		this.pHTMLElement = new HTMLElementElements();
		this.pTypeSelection = new TypeSelectionElements();
		this.pAttribute = new AttributeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.imt.sinigaglia.renaud.Testdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	core=Core;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Core:
	//	'open browser' name=Browser
	//	actions+=Action*;
	public CoreElements getCoreAccess() {
		return pCore;
	}
	
	public ParserRule getCoreRule() {
		return getCoreAccess().getRule();
	}
	
	//Browser:
	//	"chrome" | "firefox" | "safari" | "edge" | "ie";
	public BrowserElements getBrowserAccess() {
		return pBrowser;
	}
	
	public ParserRule getBrowserRule() {
		return getBrowserAccess().getRule();
	}
	
	//Action:
	//	goActions+=GoAction* | selections+=Selection*;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//GoAction:
	//	'go' name=STRING;
	public GoActionElements getGoActionAccess() {
		return pGoAction;
	}
	
	public ParserRule getGoActionRule() {
		return getGoActionAccess().getRule();
	}
	
	//Selection:
	//	linkButtonSelection=LinkButtonSelection | searchfieldSelection=SearchfieldSelection |
	//	checkboxSelection=CheckboxSelection | comboboxSelection=ComboboxSelection | divSelection=DivSelection;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}
	
	//LinkButtonSelection:
	//	"LINK" | "BUTTON" typeSelection=TypeSelection '{'
	//	generalActions=GeneralAction |
	//	'click'
	//	'}';
	public LinkButtonSelectionElements getLinkButtonSelectionAccess() {
		return pLinkButtonSelection;
	}
	
	public ParserRule getLinkButtonSelectionRule() {
		return getLinkButtonSelectionAccess().getRule();
	}
	
	//SearchfieldSelection:
	//	"SEARCH_FIELD" typeSelection=TypeSelection '{'
	//	generalAction=GeneralAction
	//	'}';
	public SearchfieldSelectionElements getSearchfieldSelectionAccess() {
		return pSearchfieldSelection;
	}
	
	public ParserRule getSearchfieldSelectionRule() {
		return getSearchfieldSelectionAccess().getRule();
	}
	
	//CheckboxSelection:
	//	"CHECKBOX" typeSelection=TypeSelection '{' (generalAction=GeneralAction |
	//	'check' |
	//	'uncheck')
	//	'}';
	public CheckboxSelectionElements getCheckboxSelectionAccess() {
		return pCheckboxSelection;
	}
	
	public ParserRule getCheckboxSelectionRule() {
		return getCheckboxSelectionAccess().getRule();
	}
	
	//ComboboxSelection:
	//	"COMBO_BOX" typeSelection=TypeSelection '{' (generalAction=GeneralAction |
	//	'select' value=STRING)
	//	'}';
	public ComboboxSelectionElements getComboboxSelectionAccess() {
		return pComboboxSelection;
	}
	
	public ParserRule getComboboxSelectionRule() {
		return getComboboxSelectionAccess().getRule();
	}
	
	//DivSelection:
	//	"DIV" typeSelection=TypeSelection '{'
	//	generalAction=GeneralAction |
	//	'click'
	//	'}';
	public DivSelectionElements getDivSelectionAccess() {
		return pDivSelection;
	}
	
	public ParserRule getDivSelectionRule() {
		return getDivSelectionAccess().getRule();
	}
	
	//GeneralAction:
	//	setAction=SetAction | storeAction=StoreAction;
	public GeneralActionElements getGeneralActionAccess() {
		return pGeneralAction;
	}
	
	public ParserRule getGeneralActionRule() {
		return getGeneralActionAccess().getRule();
	}
	
	//StoreAction:
	//	'store' '()' 'in' var=Var;
	public StoreActionElements getStoreActionAccess() {
		return pStoreAction;
	}
	
	public ParserRule getStoreActionRule() {
		return getStoreActionAccess().getRule();
	}
	
	//Var:
	//	name=STRING;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//SetAction:
	//	'set' attribute=Attribute ':' value=STRING;
	public SetActionElements getSetActionAccess() {
		return pSetAction;
	}
	
	public ParserRule getSetActionRule() {
		return getSetActionAccess().getRule();
	}
	
	//Element:
	//	"PAGE" | htmlElement=HTMLElement;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//HTMLElement:
	//	"SEARCH_FIELD" | "BUTTON" | "LINK" | "CHECKBOX" | "COMBO_BOX" | "DIV" | "IMAGE";
	public HTMLElementElements getHTMLElementAccess() {
		return pHTMLElement;
	}
	
	public ParserRule getHTMLElementRule() {
		return getHTMLElementAccess().getRule();
	}
	
	//TypeSelection:
	//	attribute=Attribute ':' value=STRING |
	//	"PARENT" |
	//	"FIRST" |
	//	"LAST" |
	//	"ALL";
	public TypeSelectionElements getTypeSelectionAccess() {
		return pTypeSelection;
	}
	
	public ParserRule getTypeSelectionRule() {
		return getTypeSelectionAccess().getRule();
	}
	
	//Attribute:
	//	"LABEL" | "ID" | "CLASS" | "ALT" | "VALUE" | "HREF" | "TITLE";
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
