/*
 * generated by Xtext 2.12.0
 */
package org.imt.sinigaglia.renaud.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.imt.sinigaglia.renaud.services.TestdslGrammarAccess;
import org.imt.sinigaglia.renaud.testDsl.CheckboxSelection;
import org.imt.sinigaglia.renaud.testDsl.ComboboxSelection;
import org.imt.sinigaglia.renaud.testDsl.Core;
import org.imt.sinigaglia.renaud.testDsl.DivSelection;
import org.imt.sinigaglia.renaud.testDsl.Element;
import org.imt.sinigaglia.renaud.testDsl.GeneralAction;
import org.imt.sinigaglia.renaud.testDsl.GoAction;
import org.imt.sinigaglia.renaud.testDsl.LinkButtonSelection;
import org.imt.sinigaglia.renaud.testDsl.Program;
import org.imt.sinigaglia.renaud.testDsl.SearchfieldSelection;
import org.imt.sinigaglia.renaud.testDsl.Selection;
import org.imt.sinigaglia.renaud.testDsl.SetAction;
import org.imt.sinigaglia.renaud.testDsl.StoreAction;
import org.imt.sinigaglia.renaud.testDsl.TestDslPackage;
import org.imt.sinigaglia.renaud.testDsl.TypeSelection;
import org.imt.sinigaglia.renaud.testDsl.Var;

@SuppressWarnings("all")
public class TestdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TestdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TestDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TestDslPackage.ACTION:
				sequence_Action(context, (org.imt.sinigaglia.renaud.testDsl.Action) semanticObject); 
				return; 
			case TestDslPackage.CHECKBOX_SELECTION:
				sequence_CheckboxSelection(context, (CheckboxSelection) semanticObject); 
				return; 
			case TestDslPackage.COMBOBOX_SELECTION:
				sequence_ComboboxSelection(context, (ComboboxSelection) semanticObject); 
				return; 
			case TestDslPackage.CORE:
				sequence_Core(context, (Core) semanticObject); 
				return; 
			case TestDslPackage.DIV_SELECTION:
				sequence_DivSelection(context, (DivSelection) semanticObject); 
				return; 
			case TestDslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case TestDslPackage.GENERAL_ACTION:
				sequence_GeneralAction(context, (GeneralAction) semanticObject); 
				return; 
			case TestDslPackage.GO_ACTION:
				sequence_GoAction(context, (GoAction) semanticObject); 
				return; 
			case TestDslPackage.LINK_BUTTON_SELECTION:
				sequence_LinkButtonSelection(context, (LinkButtonSelection) semanticObject); 
				return; 
			case TestDslPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case TestDslPackage.SEARCHFIELD_SELECTION:
				sequence_SearchfieldSelection(context, (SearchfieldSelection) semanticObject); 
				return; 
			case TestDslPackage.SELECTION:
				sequence_Selection(context, (Selection) semanticObject); 
				return; 
			case TestDslPackage.SET_ACTION:
				sequence_SetAction(context, (SetAction) semanticObject); 
				return; 
			case TestDslPackage.STORE_ACTION:
				sequence_StoreAction(context, (StoreAction) semanticObject); 
				return; 
			case TestDslPackage.TYPE_SELECTION:
				sequence_TypeSelection(context, (TypeSelection) semanticObject); 
				return; 
			case TestDslPackage.VAR:
				sequence_Var(context, (Var) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (goActions+=GoAction+ | selections+=Selection+)
	 */
	protected void sequence_Action(ISerializationContext context, org.imt.sinigaglia.renaud.testDsl.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CheckboxSelection returns CheckboxSelection
	 *
	 * Constraint:
	 *     (typeSelection=TypeSelection generalAction=GeneralAction?)
	 */
	protected void sequence_CheckboxSelection(ISerializationContext context, CheckboxSelection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComboboxSelection returns ComboboxSelection
	 *
	 * Constraint:
	 *     (typeSelection=TypeSelection (generalAction=GeneralAction | value=STRING))
	 */
	protected void sequence_ComboboxSelection(ISerializationContext context, ComboboxSelection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Core returns Core
	 *
	 * Constraint:
	 *     (name=Browser actions+=Action*)
	 */
	protected void sequence_Core(ISerializationContext context, Core semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DivSelection returns DivSelection
	 *
	 * Constraint:
	 *     (typeSelection=TypeSelection generalAction=GeneralAction)
	 */
	protected void sequence_DivSelection(ISerializationContext context, DivSelection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.DIV_SELECTION__TYPE_SELECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.DIV_SELECTION__TYPE_SELECTION));
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.DIV_SELECTION__GENERAL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.DIV_SELECTION__GENERAL_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivSelectionAccess().getTypeSelectionTypeSelectionParserRuleCall_0_1_0(), semanticObject.getTypeSelection());
		feeder.accept(grammarAccess.getDivSelectionAccess().getGeneralActionGeneralActionParserRuleCall_0_3_0(), semanticObject.getGeneralAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     htmlElement=HTMLElement
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.ELEMENT__HTML_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.ELEMENT__HTML_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getHtmlElementHTMLElementParserRuleCall_1_0(), semanticObject.getHtmlElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GeneralAction returns GeneralAction
	 *
	 * Constraint:
	 *     (setAction=SetAction | storeAction=StoreAction)
	 */
	protected void sequence_GeneralAction(ISerializationContext context, GeneralAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GoAction returns GoAction
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_GoAction(ISerializationContext context, GoAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.GO_ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.GO_ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoActionAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LinkButtonSelection returns LinkButtonSelection
	 *
	 * Constraint:
	 *     (typeSelection=TypeSelection generalActions=GeneralAction)
	 */
	protected void sequence_LinkButtonSelection(ISerializationContext context, LinkButtonSelection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.LINK_BUTTON_SELECTION__TYPE_SELECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.LINK_BUTTON_SELECTION__TYPE_SELECTION));
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.LINK_BUTTON_SELECTION__GENERAL_ACTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.LINK_BUTTON_SELECTION__GENERAL_ACTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkButtonSelectionAccess().getTypeSelectionTypeSelectionParserRuleCall_1_1_0(), semanticObject.getTypeSelection());
		feeder.accept(grammarAccess.getLinkButtonSelectionAccess().getGeneralActionsGeneralActionParserRuleCall_1_3_0(), semanticObject.getGeneralActions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     core=Core
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.PROGRAM__CORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.PROGRAM__CORE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getCoreCoreParserRuleCall_0(), semanticObject.getCore());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SearchfieldSelection returns SearchfieldSelection
	 *
	 * Constraint:
	 *     (typeSelection=TypeSelection generalAction=GeneralAction)
	 */
	protected void sequence_SearchfieldSelection(ISerializationContext context, SearchfieldSelection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.SEARCHFIELD_SELECTION__TYPE_SELECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.SEARCHFIELD_SELECTION__TYPE_SELECTION));
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.SEARCHFIELD_SELECTION__GENERAL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.SEARCHFIELD_SELECTION__GENERAL_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSearchfieldSelectionAccess().getTypeSelectionTypeSelectionParserRuleCall_1_0(), semanticObject.getTypeSelection());
		feeder.accept(grammarAccess.getSearchfieldSelectionAccess().getGeneralActionGeneralActionParserRuleCall_3_0(), semanticObject.getGeneralAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Selection returns Selection
	 *
	 * Constraint:
	 *     (
	 *         linkButtonSelection=LinkButtonSelection | 
	 *         searchfieldSelection=SearchfieldSelection | 
	 *         checkboxSelection=CheckboxSelection | 
	 *         comboboxSelection=ComboboxSelection | 
	 *         divSelection=DivSelection
	 *     )
	 */
	protected void sequence_Selection(ISerializationContext context, Selection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SetAction returns SetAction
	 *
	 * Constraint:
	 *     (attribute=Attribute value=STRING)
	 */
	protected void sequence_SetAction(ISerializationContext context, SetAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.SET_ACTION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.SET_ACTION__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.SET_ACTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.SET_ACTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetActionAccess().getAttributeAttributeParserRuleCall_1_0(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getSetActionAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StoreAction returns StoreAction
	 *
	 * Constraint:
	 *     var=Var
	 */
	protected void sequence_StoreAction(ISerializationContext context, StoreAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.STORE_ACTION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.STORE_ACTION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoreActionAccess().getVarVarParserRuleCall_3_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeSelection returns TypeSelection
	 *
	 * Constraint:
	 *     (attribute=Attribute value=STRING)
	 */
	protected void sequence_TypeSelection(ISerializationContext context, TypeSelection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.TYPE_SELECTION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.TYPE_SELECTION__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.TYPE_SELECTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.TYPE_SELECTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeSelectionAccess().getAttributeAttributeParserRuleCall_0_0_0(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getTypeSelectionAccess().getValueSTRINGTerminalRuleCall_0_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Var returns Var
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Var(ISerializationContext context, Var semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestDslPackage.Literals.VAR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestDslPackage.Literals.VAR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
