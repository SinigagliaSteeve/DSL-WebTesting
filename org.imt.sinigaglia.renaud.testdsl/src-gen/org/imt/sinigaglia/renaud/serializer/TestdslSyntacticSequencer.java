/*
 * generated by Xtext 2.12.0
 */
package org.imt.sinigaglia.renaud.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.imt.sinigaglia.renaud.services.TestdslGrammarAccess;

@SuppressWarnings("all")
public class TestdslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TestdslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CheckboxSelection_CheckKeyword_3_1_or_UncheckKeyword_3_2;
	protected AbstractElementAlias match_LinkButtonSelection_LINKKeyword_0_or___ClickKeyword_2_0_RightCurlyBracketKeyword_2_1__;
	protected AbstractElementAlias match_TypeSelection_ALLKeyword_4_or_FIRSTKeyword_2_or_LASTKeyword_3_or_PARENTKeyword_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TestdslGrammarAccess) access;
		match_CheckboxSelection_CheckKeyword_3_1_or_UncheckKeyword_3_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCheckboxSelectionAccess().getCheckKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getCheckboxSelectionAccess().getUncheckKeyword_3_2()));
		match_LinkButtonSelection_LINKKeyword_0_or___ClickKeyword_2_0_RightCurlyBracketKeyword_2_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLinkButtonSelectionAccess().getClickKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getLinkButtonSelectionAccess().getRightCurlyBracketKeyword_2_1())), new TokenAlias(false, false, grammarAccess.getLinkButtonSelectionAccess().getLINKKeyword_0()));
		match_TypeSelection_ALLKeyword_4_or_FIRSTKeyword_2_or_LASTKeyword_3_or_PARENTKeyword_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypeSelectionAccess().getALLKeyword_4()), new TokenAlias(false, false, grammarAccess.getTypeSelectionAccess().getFIRSTKeyword_2()), new TokenAlias(false, false, grammarAccess.getTypeSelectionAccess().getLASTKeyword_3()), new TokenAlias(false, false, grammarAccess.getTypeSelectionAccess().getPARENTKeyword_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CheckboxSelection_CheckKeyword_3_1_or_UncheckKeyword_3_2.equals(syntax))
				emit_CheckboxSelection_CheckKeyword_3_1_or_UncheckKeyword_3_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LinkButtonSelection_LINKKeyword_0_or___ClickKeyword_2_0_RightCurlyBracketKeyword_2_1__.equals(syntax))
				emit_LinkButtonSelection_LINKKeyword_0_or___ClickKeyword_2_0_RightCurlyBracketKeyword_2_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeSelection_ALLKeyword_4_or_FIRSTKeyword_2_or_LASTKeyword_3_or_PARENTKeyword_1.equals(syntax))
				emit_TypeSelection_ALLKeyword_4_or_FIRSTKeyword_2_or_LASTKeyword_3_or_PARENTKeyword_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'check' | 'uncheck'
	 *
	 * This ambiguous syntax occurs at:
	 *     typeSelection=TypeSelection '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_CheckboxSelection_CheckKeyword_3_1_or_UncheckKeyword_3_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'LINK' | ('click' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_LinkButtonSelection_LINKKeyword_0_or___ClickKeyword_2_0_RightCurlyBracketKeyword_2_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'PARENT' | 'FIRST' | 'LAST' | 'ALL'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_TypeSelection_ALLKeyword_4_or_FIRSTKeyword_2_or_LASTKeyword_3_or_PARENTKeyword_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
