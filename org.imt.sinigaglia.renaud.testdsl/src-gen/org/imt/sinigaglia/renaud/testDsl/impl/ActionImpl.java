/**
 * generated by Xtext 2.12.0
 */
package org.imt.sinigaglia.renaud.testDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.imt.sinigaglia.renaud.testDsl.Action;
import org.imt.sinigaglia.renaud.testDsl.GoAction;
import org.imt.sinigaglia.renaud.testDsl.Selection;
import org.imt.sinigaglia.renaud.testDsl.TestDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.imt.sinigaglia.renaud.testDsl.impl.ActionImpl#getGoActions <em>Go Actions</em>}</li>
 *   <li>{@link org.imt.sinigaglia.renaud.testDsl.impl.ActionImpl#getSelections <em>Selections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionImpl extends MinimalEObjectImpl.Container implements Action
{
  /**
   * The cached value of the '{@link #getGoActions() <em>Go Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoActions()
   * @generated
   * @ordered
   */
  protected EList<GoAction> goActions;

  /**
   * The cached value of the '{@link #getSelections() <em>Selections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelections()
   * @generated
   * @ordered
   */
  protected EList<Selection> selections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestDslPackage.Literals.ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GoAction> getGoActions()
  {
    if (goActions == null)
    {
      goActions = new EObjectContainmentEList<GoAction>(GoAction.class, this, TestDslPackage.ACTION__GO_ACTIONS);
    }
    return goActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Selection> getSelections()
  {
    if (selections == null)
    {
      selections = new EObjectContainmentEList<Selection>(Selection.class, this, TestDslPackage.ACTION__SELECTIONS);
    }
    return selections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestDslPackage.ACTION__GO_ACTIONS:
        return ((InternalEList<?>)getGoActions()).basicRemove(otherEnd, msgs);
      case TestDslPackage.ACTION__SELECTIONS:
        return ((InternalEList<?>)getSelections()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestDslPackage.ACTION__GO_ACTIONS:
        return getGoActions();
      case TestDslPackage.ACTION__SELECTIONS:
        return getSelections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestDslPackage.ACTION__GO_ACTIONS:
        getGoActions().clear();
        getGoActions().addAll((Collection<? extends GoAction>)newValue);
        return;
      case TestDslPackage.ACTION__SELECTIONS:
        getSelections().clear();
        getSelections().addAll((Collection<? extends Selection>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestDslPackage.ACTION__GO_ACTIONS:
        getGoActions().clear();
        return;
      case TestDslPackage.ACTION__SELECTIONS:
        getSelections().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestDslPackage.ACTION__GO_ACTIONS:
        return goActions != null && !goActions.isEmpty();
      case TestDslPackage.ACTION__SELECTIONS:
        return selections != null && !selections.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ActionImpl
